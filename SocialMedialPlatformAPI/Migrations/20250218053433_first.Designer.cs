// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SocialMedialPlatformAPI.Data;

#nullable disable

namespace SocialMedialPlatformAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250218053433_first")]
    partial class first
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SocialMedialPlatformAPI.Models.Chat", b =>
                {
                    b.Property<long>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ChatId"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("FromUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<long>("ToUserId")
                        .HasColumnType("bigint");

                    b.HasKey("ChatId");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("SocialMedialPlatformAPI.Models.Comment", b =>
                {
                    b.Property<long>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CommentId"));

                    b.Property<string>("CommentText")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("CommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("SocialMedialPlatformAPI.Models.Like", b =>
                {
                    b.Property<long>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LikeId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLike")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LikeId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("SocialMedialPlatformAPI.Models.MediaType", b =>
                {
                    b.Property<int>("MediaTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MediaTypeId"));

                    b.Property<string>("MediaType1")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("MediaType");

                    b.HasKey("MediaTypeId");

                    b.ToTable("MediaTypes");
                });

            modelBuilder.Entity("SocialMedialPlatformAPI.Models.Message", b =>
                {
                    b.Property<long>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MessageId"));

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("FromUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<long>("ToUserId")
                        .HasColumnType("bigint");

                    b.HasKey("MessageId");

                    b.HasIndex("ChatId");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("SocialMedialPlatformAPI.Models.Notification", b =>
                {
                    b.Property<long>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("NotificationId"));

                    b.Property<long?>("CommentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<long>("FromUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("LikeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<long?>("PostId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("ToUserId")
                        .HasColumnType("bigint");

                    b.HasKey("NotificationId");

                    b.HasIndex("CommentId");

                    b.HasIndex("FromUserId");

                    b.HasIndex("LikeId");

                    b.HasIndex("PostId");

                    b.HasIndex("RequestId");

                    b.HasIndex("StoryId");

                    b.HasIndex("ToUserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SocialMedialPlatformAPI.Models.Post", b =>
                {
                    b.Property<long>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PostId"));

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSaved")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PostTypeId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("PostId");

                    b.HasIndex("PostTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("SocialMedialPlatformAPI.Models.PostMapping", b =>
                {
                    b.Property<long>("PostMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PostMappingId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MediaName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("MediaTypeId")
                        .HasColumnType("int");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("MediaURL");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.HasKey("PostMappingId");

                    b.HasIndex("MediaTypeId");

                    b.HasIndex("PostId");

                    b.ToTable("PostMappings");
                });

            modelBuilder.Entity("SocialMedialPlatformAPI.Models.Request", b =>
                {
                    b.Property<long>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RequestId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<long>("FromUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCloseFriend")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<long>("ToUserId")
                        .HasColumnType("bigint");

                    b.HasKey("RequestId");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("SocialMedialPlatformAPI.Models.Story", b =>
                {
                    b.Property<long>("StoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("StoryId"));

                    b.Property<string>("Caption")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHighlighted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("StoryDuration")
                        .HasColumnType("int");

                    b.Property<string>("StoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("StoryTypeId")
                        .HasColumnType("int");

                    b.Property<string>("StoryUrl")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("StoryURL");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("StoryId");

                    b.HasIndex("StoryTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Stories");
                });

            modelBuilder.Entity("SocialMedialPlatformAPI.Models.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"));

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPrivate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Link")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LoginType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SocialMedialPlatformAPI.Models.Chat", b =>
                {
                    b.HasOne("SocialMedialPlatformAPI.Models.User", "FromUser")
                        .WithMany("ChatFromUsers")
                        .HasForeignKey("FromUserId")
                        .IsRequired();

                    b.HasOne("SocialMedialPlatformAPI.Models.User", "ToUser")
                        .WithMany("ChatToUsers")
                        .HasForeignKey("ToUserId")
                        .IsRequired();

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("SocialMedialPlatformAPI.Models.Comment", b =>
                {
                    b.HasOne("SocialMedialPlatformAPI.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .IsRequired();

                    b.HasOne("SocialMedialPlatformAPI.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialMedialPlatformAPI.Models.Like", b =>
                {
                    b.HasOne("SocialMedialPlatformAPI.Models.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .IsRequired();

                    b.HasOne("SocialMedialPlatformAPI.Models.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialMedialPlatformAPI.Models.Message", b =>
                {
                    b.HasOne("SocialMedialPlatformAPI.Models.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .IsRequired();

                    b.HasOne("SocialMedialPlatformAPI.Models.User", "FromUser")
                        .WithMany("MessageFromUsers")
                        .HasForeignKey("FromUserId")
                        .IsRequired();

                    b.HasOne("SocialMedialPlatformAPI.Models.User", "ToUser")
                        .WithMany("MessageToUsers")
                        .HasForeignKey("ToUserId")
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("SocialMedialPlatformAPI.Models.Notification", b =>
                {
                    b.HasOne("SocialMedialPlatformAPI.Models.Comment", "Comment")
                        .WithMany("Notifications")
                        .HasForeignKey("CommentId");

                    b.HasOne("SocialMedialPlatformAPI.Models.User", "FromUser")
                        .WithMany("NotificationFromUsers")
                        .HasForeignKey("FromUserId")
                        .IsRequired();

                    b.HasOne("SocialMedialPlatformAPI.Models.Like", "Like")
                        .WithMany("Notifications")
                        .HasForeignKey("LikeId");

                    b.HasOne("SocialMedialPlatformAPI.Models.Post", "Post")
                        .WithMany("Notifications")
                        .HasForeignKey("PostId");

                    b.HasOne("SocialMedialPlatformAPI.Models.Request", "Request")
                        .WithMany("Notifications")
                        .HasForeignKey("RequestId");

                    b.HasOne("SocialMedialPlatformAPI.Models.Story", "Story")
                        .WithMany("Notifications")
                        .HasForeignKey("StoryId");

                    b.HasOne("SocialMedialPlatformAPI.Models.User", "ToUser")
                        .WithMany("NotificationToUsers")
                        .HasForeignKey("ToUserId")
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("FromUser");

                    b.Navigation("Like");

                    b.Navigation("Post");

                    b.Navigation("Request");

                    b.Navigation("Story");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("SocialMedialPlatformAPI.Models.Post", b =>
                {
                    b.HasOne("SocialMedialPlatformAPI.Models.MediaType", "PostType")
                        .WithMany("Posts")
                        .HasForeignKey("PostTypeId")
                        .IsRequired();

                    b.HasOne("SocialMedialPlatformAPI.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("PostType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialMedialPlatformAPI.Models.PostMapping", b =>
                {
                    b.HasOne("SocialMedialPlatformAPI.Models.MediaType", "MediaType")
                        .WithMany("PostMappings")
                        .HasForeignKey("MediaTypeId")
                        .IsRequired();

                    b.HasOne("SocialMedialPlatformAPI.Models.Post", "Post")
                        .WithMany("PostMappings")
                        .HasForeignKey("PostId")
                        .IsRequired();

                    b.Navigation("MediaType");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SocialMedialPlatformAPI.Models.Request", b =>
                {
                    b.HasOne("SocialMedialPlatformAPI.Models.User", "FromUser")
                        .WithMany("RequestFromUsers")
                        .HasForeignKey("FromUserId")
                        .IsRequired();

                    b.HasOne("SocialMedialPlatformAPI.Models.User", "ToUser")
                        .WithMany("RequestToUsers")
                        .HasForeignKey("ToUserId")
                        .IsRequired();

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("SocialMedialPlatformAPI.Models.Story", b =>
                {
                    b.HasOne("SocialMedialPlatformAPI.Models.MediaType", "StoryType")
                        .WithMany("Stories")
                        .HasForeignKey("StoryTypeId")
                        .IsRequired();

                    b.HasOne("SocialMedialPlatformAPI.Models.User", "User")
                        .WithMany("Stories")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("StoryType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialMedialPlatformAPI.Models.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("SocialMedialPlatformAPI.Models.Comment", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("SocialMedialPlatformAPI.Models.Like", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("SocialMedialPlatformAPI.Models.MediaType", b =>
                {
                    b.Navigation("PostMappings");

                    b.Navigation("Posts");

                    b.Navigation("Stories");
                });

            modelBuilder.Entity("SocialMedialPlatformAPI.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("Notifications");

                    b.Navigation("PostMappings");
                });

            modelBuilder.Entity("SocialMedialPlatformAPI.Models.Request", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("SocialMedialPlatformAPI.Models.Story", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("SocialMedialPlatformAPI.Models.User", b =>
                {
                    b.Navigation("ChatFromUsers");

                    b.Navigation("ChatToUsers");

                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("MessageFromUsers");

                    b.Navigation("MessageToUsers");

                    b.Navigation("NotificationFromUsers");

                    b.Navigation("NotificationToUsers");

                    b.Navigation("Posts");

                    b.Navigation("RequestFromUsers");

                    b.Navigation("RequestToUsers");

                    b.Navigation("Stories");
                });
#pragma warning restore 612, 618
        }
    }
}
